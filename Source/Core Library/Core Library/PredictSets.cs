using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Core.Library
{
    public class PredictSets
    {
        string program = "hold, unit, digit, company, joe, response, struct, PrimaryMission";
        string comments = "comment, hold, PrimaryMission, unit, digit, company, joe, response, struct, }, post, inquire, go, campaign, comment, capture, phase, inorder, id, ++, --, backup, abort, $, (, )";
        string datatype = "unit, digit, company, joe, response";
        string Literals = "Numlit, Declit, Stringlit, Charlit, id, AFFIRMATIVE, NEGATIVE";
        string constant = "hold, comment, PrimaryMission, unit, digit, company, joe, response, struct";
        string localChoice = "unit, digit, company, joe, response, post, inquire, go, campaign, comment, capture, phase, inorder, id, ++, --, (, ), abort, }, $";
        string localdec = "=, ,, ;";
        string UnitaddID = "=, ,, ;";
        string UnitEXinit = ",, ;";
        string main = "PrimaryMission";
        string globalDec = "unit, digit, company, joe, response, struct, PrimaryMission, unit, digit, company, joe, response, struct, comment";
        string localdecChoice = "unit, digit, company, joe, response, struct";
        string decChoice = "unit, digit, company, joe, response";
        string globalChoice = "=, ,, (, ";
        string BodyChoice = "=, ,";
        string varUnitBody = "=, ,";
        string functReturnBody = "(";
        string functVoidBody = "(";
        string arrUnitBody = "";
        string arrType = "";
        string N1 = "";
        string ArrayChoice = "=, ,, ;, unit, digit, company, joe, response, =, )";
        string N2 = "";
        string index1 = "Numlit, id";
        string add = "+";
        string index2 = "Numlit, id";
        string indexEX = "id, Numlit";
        string unitAID = "=, unit, digit, company, joe, response, ,, ;, =, )";
        string unitAIDTWO = "=, ,, ;, unit, digit, company, joe, response, =, )";
        string unitElem = "Numlit, Declit, Stringlit, Charlit, id, AFFIRMATIVE, NEGATIVE";
        string EXTelem = "Numlit, Declit, Stringlit, Charlit, id, AFFIRMATIVE, NEGATIVE";
        string EXTelemChoice = ",, }";
        string unitElemTwo = "{";
        string ElemTwoLit = ",, }, ,";
        string ElemTwoTail = ",, }";
        string assignChoice = "id, ++, --, }, backup, abort, $, comment, post, inquire, go, campaign, capture, phase, inorder, id, ++, --";
        string AccessAssignDtype = "id";
        string assignValueChoice = "=, ., {, +, -, *, /, %, ^, ++, --";
        string assigning = "=, {, +, -, *, /, %, ^, ., ++, --";
        string ArrayID = "{";
        string ArrayIDTail = "=";
        string AssignSym = "+, -, *, /, %, ^";
        string assignValue = "Numlit, Declit, Stringlit, Charlit, id, AFFIRMATIVE, NEGATIVE or ++ , --, ;";
        string functParam = "(, ;, +, -, *, /, %, ^";
        string functIDParam = "Numlit, Declit, Stringlit, Charlit, id, AFFIRMATIVE, NEGATIVE, )";
        string addfunctIDParam = ",, )";
        string funct = "unit, digit, company, joe, response, miss";
        string functReturn = "unit, digit, company, joe, response";
        string functVoid = "miss";
        string dtypeA = "unit, digit, response, id, )";
        string EXdtypeA = ",, )";
        string dtypef = "unit, digit, response, id";
        string ExID = ",";
        string arrIndex = "";
        string struct_U = "struct";
        string sDec = "unit, digit, company, joe, response, }";
        string index = "[";
        string body = "post, capture, inquire, inorder, go, phase, campaign, id, ++, --, comment, post, inquire, go, campaign, capture, phase, inorder, id, ++, --, }, backup, abort, $, comment, post, inquire, go, campaign, capture, phase, inorder, id, ++, --";
        string print = "post";
        string postval = "Numlit, Declit, Stringlit, Charlit, id, AFFIRMATIVE, NEGATIVE";
        string ConcatLit = ", , )";
        string scan = "capture";
        string ExtI = ", , )";
        string for_state = "inquire";
        string forstatement = "unit, digit, company, joe, response, post, inquire, go, campaign, comment, capture, phase, inorder, id, ++, --, }";
        string val1 = "Numlit, 0";
        string mntCond = "++, --";
        string mntCondT = "++, --";
        string mnt = "++, --";
        string ifelse = "inorder";
        string ifcondition = "Numlit, Declit, Stringlit, Charlit, id, AFFIRMATIVE, NEGATIVE, (";
        string ifstatement = "unit, digit, company, joe, response, post, inquire, go, campaign, comment, capture, phase, inorder, id, ++, --, }";
        string elseif = "otherorder, Numlit, Declit, Stringlit, Charlit, id, AFFIRMATIVE, NEGATIVE, (, order, }, backup, abort, $, comment, post, inquire, go, campaign, capture, phase, inorder, ++, --";
        string elseifstatement = "unit, digit, company, joe, response, post, inquire, go, campaign, comment, capture, phase, inorder, id, ++, --";
        string else_state = "order, post, inquire, go, campaign, comment, capture, phase, inorder, id, ++, --, }, backup, abort, $";
        string elsestatement = "unit, digit, company, joe, response, post, inquire, go, campaign, comment, capture, phase, inorder, id, ++, --, }";
        string dowhile = "go";
        string dostatement = "unit, digit, company, joe, response, post, inquire, go, campaign, comment, capture, phase, inorder, id, ++, --, }";
        string while_state = "phase, }, backup, abort, $, comment, post, inquire, go, campaign, capture, phase, inorder, id, ++, --";
        string whilestatement = "unit, digit, company, joe, response, post, inquire, go, campaign, comment, capture, phase, inorder, id, ++, --, }";
        string switch_state = "campaign";
        string case_state = "operation";
        string def = "DEFAULT, }";
        string casestatement = "unit, digit, company, joe, response, post, inquire, go, campaign, comment, capture, phase, inorder, id, ++, -- 	, abort, }";
        string MathOp = "(, Numlit, Declit, Stringlit, Charlit, id, AFFIRMATIVE, NEGATIVE";
        string operCond = "(, Numlit, Declit, Stringlit, Charlit, id, AFFIRMATIVE, NEGATIVE";
        string operCondChoice = "+, -, *, /, %, ^, =";
        string operSym = "+, -,  *, /, %, ^";
        string operEq = "+=, , -=, *=, /=, %=, =";
        string operExt_s = "Numlit, Declit, Stringlit, Charlit, id, AFFIRMATIVE, NEGATIVE, (";
        string operExt_rep = "+, -, *, /, %, ^, ), ;";
        string operand = "Numlit, Declit, Stringlit, Charlit, id, AFFIRMATIVE, NEGATIVE";
        string simMathOp = "Numlit, Declit, Stringlit, Charlit, id, AFFIRMATIVE, NEGATIVE";
        string S_MathExt = "+, -, *, /, %, ^, ), ;";
        string operCondExt = "+, -, *, /, %, ^, ;";
        string RelOp = "Numlit, Declit, Stringlit, Charlit, id, AFFIRMATIVE, NEGATIVE";
        string RelopExt = "==, !=, >=, <=, >, <, )";
        string op1 = "==, !=, >=, <=, >, <";
        string LogOp = "(";
        string ExtLogOp = "||, &";
        string LogOper = "||, &";
        string end = "}";
        string StartProgram = "comment, hold, PrimaryMission, unit, digit, company, joe, response, struct";

    public string GetPredictSet(int code)
        {
            switch (code)
            {
                case 2001: return StartProgram;
                case 2002: return program;
                case 2003: return comments;
                case 2004: return datatype;
                case 2005: return Literals;
                case 2006: return constant;
                case 2007: return localChoice;
                case 2008: return localdec;
                case 2009: return UnitaddID;
                case 2010: return UnitEXinit;
                case 2011: return main;
                case 2012: return globalDec;
                case 2013: return localdecChoice;
                case 2014: return decChoice;
                case 2015: return globalChoice;
                case 2016: return BodyChoice;
                case 2017: return varUnitBody;
                case 2018: return functReturnBody;
                case 2019: return functVoidBody;
                case 2020: return arrUnitBody;
                case 2021: return arrType;
                case 2022: return N1;
                case 2023: return ArrayChoice;
                case 2024: return N2;
                case 2025: return index1;
                case 2026: return add;
                case 2027: return index2;
                case 2028: return indexEX;
                case 2029: return unitAID;
                case 2030: return unitAIDTWO;
                case 2031: return unitElem;
                case 2032: return EXTelem;
                case 2033: return EXTelemChoice;
                case 2034: return unitElemTwo;
                case 2035: return ElemTwoLit;
                case 2036: return ElemTwoTail;
                case 2037: return assignChoice;
                case 2038: return AccessAssignDtype;
                case 2039: return assignValueChoice;
                case 2040: return assigning;
                case 2041: return ArrayID;
                case 2042: return ArrayIDTail;
                case 2043: return AssignSym;
                case 2044: return assignValue;
                case 2045: return functParam;
                case 2046: return functIDParam;
                case 2047: return addfunctIDParam;
                case 2048: return funct;
                case 2049: return functReturn;
                case 2050: return functVoid;
                case 2051: return dtypeA;
                case 2052: return EXdtypeA;
                case 2053: return dtypef;
                case 2054: return ExID;
                case 2055: return arrIndex;
                case 2056: return struct_U;
                case 2057: return sDec;
                case 2058: return index;
                case 2059: return body;
                case 2060: return print;
                case 2061: return postval;
                case 2062: return ConcatLit;
                case 2063: return scan;
                case 2064: return ExtI;
                case 2065: return for_state;
                case 2066: return forstatement;
                case 2067: return val1;
                case 2068: return mntCond;
                case 2069: return mntCondT;
                case 2070: return mnt;
                case 2071: return ifelse;
                case 2072: return ifcondition;
                case 2073: return ifstatement;
                case 2074: return elseif;
                case 2075: return elseifstatement;
                case 2076: return else_state;
                case 2077: return elsestatement;
                case 2078: return dowhile;
                case 2079: return dostatement;
                case 2080: return while_state;
                case 2081: return whilestatement;
                case 2082: return switch_state;
                case 2083: return case_state;
                case 2084: return def;
                case 2085: return casestatement;
                case 2086: return MathOp;
                case 2087: return operCond;
                case 2088: return operCondChoice;
                case 2089: return operSym;
                case 2090: return operEq;
                case 2091: return operExt_s;
                case 2092: return operExt_rep;
                case 2093: return operand;
                case 2094: return simMathOp;
                case 2095: return S_MathExt;
                case 2096: return operCondExt;
                case 2097: return RelOp;
                case 2098: return RelopExt;
                case 2099: return op1;
                case 2100: return LogOp;
                case 2101: return ExtLogOp;
                case 2102: return LogOper;
                case 2103: return end;
            }
            return "";
        }
    }
    
}
