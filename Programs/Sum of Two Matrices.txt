unit a[100][100];
unit b[100][100];
unit sum[100][100];

PrimaryMission() {
unit row, col, i, j, x,y;
unit choice=0;
go {
commence;
post("\n\t\t\tEnter number of rows (between 1 and 100): ");
capture(#row);
post("\n\t\t\tEnter number of columns (between 1 and 100): ");
capture(#col);

post("\n\t\t\tEnter elements of 1st matrix: ");
inquire(i = 0; i < row; ++i) {
inquire(j = 0; j < col; ++j) {
x=i+1;
y=i+1; post("\n\t\t\tEnter element a[" + x + "][" + y + "]: ");
capture(#a[i][j]);
}
}
post("\n\t\t\tEnter elements of 2nd matrix: ");
inquire(i = 0; i < row; ++i) {
inquire(j = 0; j < col; ++j) {
x=i+1;
y=i+1;
post("\n\t\t\tEnter element b[" + x + "][" + y + "]: ");
capture(#b[i][j]);
}
}

inquire(i = 0; i < row; ++i) {    
inquire(j = 0; j < col; ++j) {
sum[i][j] = a[i][j] + b[i][j];
}
}
post("\n\t\t\tSum of two matrix is: ");
inquire(i = 0; i < row; ++i) {
inquire(j = 0; j < col; ++j) {
post(sum[i][j]);
col=col-1;
inorder(j = = col) {
post("\n");
}
}
}

go {
company ch;
post("\n\n\t\t\tTRY AGAIN? [Y] Yes or [N] No: ");
capture(#ch);
inorder((ch = = "Y") || (ch = = "y")) {
row=0;
col=0;
i=0;
j=0;
x=0;
y=0;
choice = 1;
}
otherorder((ch = = "N") || (ch = = "n")) {
choice = 0;
}
order {
post("\n\t\t\tError Input!");
choice = 3;
}

} phase(choice = = 3);

} phase(choice != 0);
post("\n\t\t\tGOODBYE!!");
} deploy();
